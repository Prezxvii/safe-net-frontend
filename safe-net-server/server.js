// 1. Core Imports
const express = require('express');
const cors = require('cors'); // Required for Cross-Origin communication
require('dotenv').config(); // Load environment variables from .env

// 2. Initialize App and Constants
const app = express();
// Use the PORT from your .env, or default to 4000
const port = process.env.PORT || 4000;Â 
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY;
const OPENROUTER_MODEL_NAME = process.env.OPENROUTER_MODEL_NAME || 'mistralai/mistral-small-3.2-24b-instruct-2506';

// *******************************************************************
// ðŸ”‘ NEW: Define the allowed origin for CORS
// Read the deployed frontend URL from a new environment variable (e.g., set on Render)
// Fallback to localhost for development
const ALLOWED_ORIGIN = process.env.FRONTEND_URL || 'http://localhost:3000';
console.log(`CORS ALLOWED_ORIGIN: ${ALLOWED_ORIGIN}`);
// *******************************************************************

// Simple check to ensure API key is present
if (!OPENROUTER_API_KEY) {
Â  Â  console.error("CRITICAL: OPENROUTER_API_KEY is not set in .env file!");
Â  Â  process.exit(1);
}

// 3. Middleware Configuration
// CRITICAL: Configure CORS to allow requests from your React app's origin
app.use(cors({
Â  Â  // *******************************************************************
Â  Â  // ðŸ›‘ FIX: Use the dynamically configured ALLOWED_ORIGIN
Â  Â  origin: ALLOWED_ORIGIN,
Â  Â  // This ensures that your deployed Vercel frontend is the only allowed origin (besides localhost in dev)
Â  Â  // *******************************************************************
}));

// Middleware to parse JSON request bodies
app.use(express.json());

// 4. API Route Definition
app.post('/api/classify', async (req, res) => {
Â  Â  // Extract the text to classify from the request body
Â  Â  const { text } = req.body;

Â  Â  if (!text) {
Â  Â  Â  Â  return res.status(400).json({ error: 'Missing "text" in request body.' });
Â  Â  }

Â  Â  // Define the prompt for the language model
Â  Â  const prompt = `Classify the following text content as either "SAFE" or "UNSAFE" for a general audience.
Â  Â  Â  Â  If the content is inappropriate, explicit, or hateful, classify as UNSAFE. Otherwise, classify as SAFE.
Â  Â  Â  Â  Respond ONLY with the single word: SAFE or UNSAFE.

Â  Â  Â  Â  Content: "${text}"
Â  Â  `;

Â  Â  try {
Â  Â  Â  Â  const response = await fetch("https://openrouter.ai/api/v1/chat/completions", {
Â  Â  Â  Â  Â  Â  method: "POST",
Â  Â  Â  Â  Â  Â  headers: {
Â  Â  Â  Â  Â  Â  Â  Â  "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
Â  Â  Â  Â  Â  Â  Â  Â  "Content-Type": "application/json"
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  Â  Â  body: JSON.stringify({
Â  Â  Â  Â  Â  Â  Â  Â  model: OPENROUTER_MODEL_NAME,
Â  Â  Â  Â  Â  Â  Â  Â  messages: [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  { role: "user", content: prompt }
Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  Â  Â  Â  Â  })
Â  Â  Â  Â  });

Â  Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  Â  Â  const errorData = await response.json();
Â  Â  Â  Â  Â  Â  console.error('OpenRouter API Error:', errorData);
Â  Â  Â  Â  Â  Â  return res.status(response.status).json({Â 
Â  Â  Â  Â  Â  Â  Â  Â  error: 'External API call failed',Â 
Â  Â  Â  Â  Â  Â  Â  Â  details: errorDataÂ 
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }

Â  Â  Â  Â  const data = await response.json();
Â  Â  Â  Â Â 
Â  Â  Â  Â  // Extract the classification text and clean it up (e.g., remove whitespace)
Â  Â  Â  Â  const classification = data.choices[0].message.content.trim().toUpperCase();

Â  Â  Â  Â  // Respond to the client with the classification
Â  Â  Â  Â  res.json({Â 
Â  Â  Â  Â  Â  Â  text: text,
Â  Â  Â  Â  Â  Â  classification: classification
Â  Â  Â  Â  });

Â  Â  } catch (error) {
Â  Â  Â  Â  console.error('Server error during API call:', error);
Â  Â  Â  Â  res.status(500).json({ error: 'Internal server error during classification.' });
Â  Â  }
});

// 5. Start the Server
app.listen(port, () => {
Â  Â  console.log(`Server running on http://localhost:${port}`);
});
